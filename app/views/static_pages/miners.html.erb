<% provide(:title, "Miners profitability modeling") %>
<%= javascript_include_tag "//www.google.com/jsapi", "chartkick" %>
    <h1>Miners profitability modeling</h1>
    <p>
    <center>

       <% if !is_number?( @diffChange )
        @diffChange = 2
      else 
        if ( Float(@diffChange) < - 75 || Float(@diffChange) > 400)
          @diffChange = 2
        end
      end

    if !is_number?( @priceChange )
      @priceChange = 0 
      else 
        if ( Float(@priceChange) < - 100 || Float(@priceChange) > 1000000)
          @priceChange = 0
        end
      end
    
      %>

      
    <%= form_tag "miners" do %>
    Percent difficulty change: (every 14 days) <%= text_field_tag "percentDiffChange", @diffChange %>% &nbsp;&nbsp;&nbsp;&nbsp;   
    Percent price change next 365 days: <%= text_field_tag "percentPriceChange", @priceChange %>%    &nbsp;&nbsp;&nbsp;&nbsp;
    <%= submit_tag "Update model" %>
    <% end 

    s7Be = -1
    s5Be = -1
    s4Be = -1
    s3Be = -1

    %>

    </p>

 

        <h2> <%= @diffChange %>% difficulty increase every 14 days, <%= @priceChange %>% yearly price increase</h2>

      <% startDate = 1.days.from_now.beginning_of_day 
        endDate = 366.days.from_now.beginning_of_day
        percentDiffChange = Float(@diffChange)/100
        percentPriceChange = (Float(@priceChange)/100 + 1.0) ** (1.0/365) - 1.0
        difficulty = ActiveSupport::JSON.decode(open("https://blockexplorer.com/api/status?q=getDifficulty").read)["difficulty"].to_f
        btc_price = ActiveSupport::JSON.decode(open("https://www.bitstamp.net/api/ticker/").read)["bid"].to_f
        minerPrice = Dataset.last.s7_btc
        minerPriceS5 = Dataset.last.s5_btc
        minerPriceS4 = Dataset.last.s4_btc
        minerPriceS3 = Dataset.last.s3_btc
      %>



      <%

      firstDay = { date: startDate, difficulty: difficulty, btc_price: btc_price, profit: (502914.19/difficulty*btc_price-0.0005796)/btc_price/minerPrice, commulative: 0.000 }
      firstDayS5 = { date: startDate, difficulty: difficulty, btc_price: btc_price, profit: (502914.19/difficulty*btc_price-0.001175)/btc_price/minerPriceS5, commulative: 0.000 }
      firstDayS4 = { date: startDate, difficulty: difficulty, btc_price: btc_price, profit: (502914.19/difficulty*btc_price-0.001625)/btc_price/minerPriceS4, commulative: 0.000 }
      firstDayS3 = { date: startDate, difficulty: difficulty, btc_price: btc_price, profit: (502914.19/difficulty*btc_price-0.00192)/btc_price/minerPriceS3, commulative: 0.000 }
      firstDayPrice = { date: startDate, price: 1.0 }

      datamodel = []
      datamodelS5 = []
      datamodelS4 = []
      datamodelS3 = []
      fixedmodel = []

      datamodel << firstDay
      datamodelS5 << firstDayS5
      datamodelS4 << firstDayS4
      datamodelS3 << firstDayS3
      fixedmodel << firstDayPrice

      i = 1
      d = 0
      j =  (endDate - startDate) / (24 * 3600) + 1

      until i > j  do 
        daysFromNow = i
        d+=1
        if (d == 14)
          difficulty = difficulty * (1 + percentDiffChange)
          d = 0
        end

        btc_price = btc_price * (1 + percentPriceChange)

        %>


        <%
        newProfit = (502914.19/difficulty*btc_price-0.0005796)/btc_price/minerPrice
        newCommulative = datamodel[i-1][:commulative] + newProfit
        newDay = { date: daysFromNow.days.from_now.beginning_of_day, difficulty: difficulty, btc_price: btc_price, profit: newProfit, commulative: newCommulative }

        newProfitS5 = (502914.19/difficulty*btc_price-0.001175)/btc_price/minerPriceS5
        newCommulativeS5 = datamodelS5[i-1][:commulative] + newProfitS5
        newDayS5 = { date: daysFromNow.days.from_now.beginning_of_day, difficulty: difficulty, btc_price: btc_price, profit: newProfitS5, commulative: newCommulativeS5 }

        newProfitS4 = (502914.19/difficulty*btc_price-0.001625)/btc_price/minerPriceS4
        newCommulativeS4 = datamodelS4[i-1][:commulative] + newProfitS4
        newDayS4 = { date: daysFromNow.days.from_now.beginning_of_day, difficulty: difficulty, btc_price: btc_price, profit: newProfitS4, commulative: newCommulativeS4 }

          newProfitS3 = (502914.19/difficulty*btc_price-0.00192)/btc_price/minerPriceS3
        newCommulativeS3 = datamodelS3[i-1][:commulative] + newProfitS3
        newDayS3 = { date: daysFromNow.days.from_now.beginning_of_day, difficulty: difficulty, btc_price: btc_price, profit: newProfitS3, commulative: newCommulativeS3 }

        if (s7Be < 0 && newCommulative > 1.0)
          s7Be = daysFromNow
        end

        if (s5Be < 0 && newCommulativeS5 > 1.0)
          s5Be = daysFromNow
        end

        if (s4Be < 0 && newCommulativeS4 > 1.0)
          s4Be = daysFromNow
        end

        if (s3Be < 0 && newCommulativeS3 > 1.0)
          s3Be = daysFromNow
        end

        datamodel << newDay
        datamodelS5 << newDayS5
        datamodelS4 << newDayS4
        datamodelS3 << newDayS3
        fixedmodel << { date: daysFromNow.days.from_now.beginning_of_day, price: 1.0 }
        

      i +=1;
      end
 
      return_array = datamodel.map { |h| h.slice(:date, :commulative).values }
      return_arrayS5 = datamodelS5.map { |h| h.slice(:date, :commulative).values }
      return_arrayS4 = datamodelS4.map { |h| h.slice(:date, :commulative).values }
      return_arrayS3 = datamodelS3.map { |h| h.slice(:date, :commulative).values }
      return_fixed = fixedmodel.map { |h| h.slice(:date, :price).values }

      coolData = 
      [
        {name: "S7", data: return_array},
        {name: "S5", data: return_arrayS5},
        {name: "S4", data: return_arrayS4},
        {name: "S3", data: return_arrayS3},
        {name: "Miner cost", data: return_fixed}
        ]
      
        s7days = "Never/year+"
        if (s7Be > 0.0)
          s7days = "#{s7Be} days"
        end
        s5days = "Never/year+"
        if (s5Be > 0.0)
          s5days = "#{s5Be} days"
        end
                s4days = "Never/year+"
        if (s4Be > 0.0)
          s4days = "#{s4Be} days"
        end
        s3days = "Never/year+"
        if (s3Be > 0.0)
          s3days = "#{s3Be} days"
        end

      %>



      <%= line_chart coolData, library: {curveType: "none", pointSize: 0, lineWidth: 3, height: 600} %>

      <br>
      <br>
        <br>
      <br>
        <br>
      <br>
        <br>
      <br>
        <br>
      <br>
        <br>
      <br>
        <br>
      <br>
        <br>
      <br>

      BTC price end of period: $<%= btc_price.round(0) %> Difficulty: <%= difficulty.round(0) %> <br>
      Break even 
      S7: <b> <%= s7days %> </b>
      S5: <b> <%= s5days %> </b>
      S4: <b> <%= s4days %> </b>
      S3: <b> <%= s3days %> </b>


      <br>
      <br>
  
    


      <br>
    </p>
