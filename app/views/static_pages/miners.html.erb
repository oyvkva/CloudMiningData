<% provide(:title, "Miners") %>
<%= javascript_include_tag "//www.google.com/jsapi", "chartkick" %>
    <h1>Market</h1>
    <p>
      This is the market
    </p>

      <% startDate = 365.days.ago.beginning_of_day 
        endDate = 5.days.ago.beginning_of_day
        percentDiffChange = 0.04
        percentPriceChange = 0.001
        difficulty = ActiveSupport::JSON.decode(open("https://blockexplorer.com/api/status?q=getDifficulty").read)["difficulty"].to_f
        btc_price = ActiveSupport::JSON.decode(open("https://www.bitstamp.net/api/ticker/").read)["bid"].to_f
        minerPrice = 0.00035
      %>



      <%

      firstDay = { date: startDate, difficulty: difficulty, btc_price: btc_price, profit: (502914.19/difficulty*btc_price-0.00192)/btc_price, commulative: 0.000 }
      firstDayPrice = { date: startDate, price: minerPrice }

      datamodel = []
      fixedmodel = []

      datamodel << firstDay
      fixedmodel << firstDayPrice

      i = 1
      d = 0
      j =  (endDate - startDate) / (24 * 3600)

      until i > j  do 
        daysAgo = 365 - i
        d+=1
        if (d == 14)
          difficulty = difficulty * (1 + percentDiffChange)
          d = 0
        end

        btc_price = btc_price * (1 + percentPriceChange)

        %>

        <br>Difficulty: <%= difficulty%>
        <br>Price: <%= btc_price%>

        <%
        newProfit = (502914.19/difficulty*btc_price-0.001175)/btc_price
        newCommulative = datamodel[i-1][:commulative] + newProfit
        newDay = { date: daysAgo.days.ago.beginning_of_day, difficulty: difficulty, btc_price: btc_price, profit: newProfit, commulative: newCommulative }
        datamodel << newDay
        fixedmodel << { date: daysAgo.days.ago.beginning_of_day, price: minerPrice }
        

      i +=1;
      end
 
      return_array = datamodel.map { |h| h.slice(:date, :commulative).values }
      return_fixed = fixedmodel.map { |h| h.slice(:date, :price).values }

      coolData = 
      [
        {name: "Earnings", data: return_array},
        {name: "Miner cost", data: return_fixed}
        ]
      %>

   

      <%= line_chart coolData, library: {curveType: 'function', pointSize: 0, lineWidth: 3 } %>

      <br>
      <br>
      <h2> The Data </h2>
      <%= coolData %>
  



      <h2>S4 commulative income between <%= startDate %> and <%= endDate %></h2>
      <% theSet = Dataset.where("created_at >= ?", startDate).where("created_at <= ?", endDate).where("s4_btc > ?", 0.0).group_by_day( :created_at, "avg", "(502914.19/difficulty*btc_price-0.001625)/(btc_price)")
        sum = 0
        result = theSet.map {|x,y| [x, (sum+=y)]}
        %>
        <%= area_chart result %>

        <h2>S4 profit after selling the S4 between <%= startDate %> and <%= endDate %></h2>
    
      <% 
        sum = 0

        theSet = Dataset.where("created_at >= ?", startDate).where("created_at <= ?", endDate).where("s4_btc > ?", 0.0).group_by_day( :created_at, "avg", "(502914.19/difficulty*btc_price-0.001625)/(btc_price)")
        theHashPrice = Dataset.where("created_at >= ?", startDate).where("created_at <= ?", endDate).where("s4_btc > ?", 0.0).group_by_day( :created_at, "avg", "s4_btc")
        theNewSet = Hash[*theSet.map {|x,y| [x, - theHashPrice.values[0] + (sum+=y)]}.flatten(1)]
        
        finalSet = theNewSet.merge(theHashPrice){ |k, a_value, b_value| a_value + b_value }
        %>
        <%= area_chart finalSet %>
 

      <br>
    </p>
  </body>
</html>